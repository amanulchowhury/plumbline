export declare class ShallowWrapper<T> {
    private renderer;
    private renderPromise;
    private rendering;
    private currentElement;
    constructor();
    /**
     * Create ShallowWrapper
     * @param nodes
     * @param testComponent
     * @param testModule
     * @param options
     * @returns {ShallowWrapper<T>}
     */
    create(nodes: any, testComponent: T, testModule: any, options: any): ShallowWrapper<T>;
    private existing;
    /**
     * Render the Component
     * @returns {Promise<ShallowWrapper<T>>}
     */
    render(): Promise<ShallowWrapper<T>>;
    private checkRender;
    /**
     * Get ElementRef of ShallowWrapper
     * @return ElementRef of current ShallowWrapper
     */
    element(): any;
    /**
     * Find child element within ShallowWrapper
     * @return child elements matched
     */
    find(cssOrDirective: any): Array<ShallowWrapper<T>>;
    /**
     * Find parent element of ShallowWrapper
     * @return parent of ShallowWrapper
     */
    parent(): ShallowWrapper<T>;
    /**
     * Get the instance of this Component in TestBed
     * @returns instance of Component in TestBed
     */
    instance(): T;
    /**
     * Get the bindings that were used in this Component instance
     * @returns bindings used to create this Component
     */
    bindings(): any;
    /**
     * Get the fixture generated by TestBed
     * @returns fixture for Component generated by TestBed
     */
    fixture(): any;
    /**
     * Wait for the instance and DOM to update
     */
    update(): void;
    tester(): any;
    /**
     * Get the module used in this Component instance test
     * @returns complete module put together by ShallowWrapper
     */
    module(): any;
}
